// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String @id @default(uuid())
  email         String @unique
  password      String
  first_name    String
  last_name     String
  
  userAuthToken String @unique

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  role          Roles @relation(fields: [roleId], references: [id])
  roleId        String

  restaurants   Restaurants[]
}

model Roles {
  id            String    @id @default(uuid())
  name          String    @unique
  User          User[]
}

model Restaurants {
  id            String    @id @default(uuid())
  name          String
  address       String
  phone         String
  email         String
  image         String?

  menus         Menus[]
  tables        Tables[]
  recipes       Recipes[]
  // storages      Storages[]

  user          User @relation(fields: [userId], references: [id])
  userId        String
}

model Menus {
  id            String    @id @default(uuid())
  name          String
  type          String?
  description   String?

  sections      MenuSections[]

  restaurant    Restaurants @relation(fields: [restaurantId], references: [id])
  restaurantId  String
}

model MenuSections {
  id            String    @id @default(uuid())
  name          String

  recipes       Recipes[]

  menu          Menus @relation(fields: [menuId], references: [id])
  menuId        String
}

model Tables {
  id            Int    @id @default(autoincrement())
  locationX     Float?
  locationY     Float?
  occupied      Boolean @default(false)
  number        Int

  orders        Orders[]

  restaurant    Restaurants @relation(fields: [restaurantId], references: [id])
  restaurantId  String
}

model Recipes {
  id            Int    @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  image         String?

  ingredients   RecipeIngredients[]

  restaurant    Restaurants @relation(fields: [restaurantId], references: [id])
  restaurantId  String

  menuSection   MenuSections @relation(fields: [menuSectionId], references: [id])
  menuSectionId String

  orders       RecipesOnOrders[]
  // order         Orders? @relation(fields: [orderId], references: [id])
  // orderId       String?
}

model RecipeIngredients {
  id          Int    @id @default(autoincrement())
  // ingrident   Ingredients?
  unit        String
  quantity    Float

  ingredient      Ingredients @relation(fields: [ingredientId], references: [id])
  ingredientId    Int

  recipe      Recipes @relation(fields: [recipeId], references: [id])
  recipeId    Int
}

model Ingredients {
  id                  Int    @id @default(autoincrement())
  name                String
  unitList            String?
  image               String?

  // storages            Storages @relation(fields: [storagesId], references: [id])
  // storagesId          Int

  recipes             RecipeIngredients[]

  // recipeIngredient    RecipeIngredients @relation(fields: [recipeIngredientId], references: [id])
  // recipeIngredientId  Int  @unique // relation scalar field (used in the `@r
}

model Orders {
  id            String  @id @default(uuid())
  status        String
  orderDateTime DateTime

  // recipes       Recipes[]
  recipes       RecipesOnOrders[]

  table         Tables @relation(fields: [tableId], references: [id])
  tableId       Int
}

model RecipesOnOrders {
  order       Orders     @relation(fields: [orderId], references: [id])
  orderId     String // relation scalar field (used in the `@relation` attribute above)
  recipe      Recipes @relation(fields: [recipeId], references: [id])
  recipeId    Int // relation scalar field (used in the `@relation` attribute above)

  quantity    Int
  
  @@id([orderId, recipeId])
}


// model Storages {
//   id                Int @id @default(autoincrement())

//   name              String
//   quatityInStorage  Int
//   maxCapacity       Int
//   unit              String
//   unitList          String?
  
//   ingredients       Ingredients[]

//   restaurant        Restaurants @relation(fields: [restaurantId], references: [id])
//   restaurantId      String
// }