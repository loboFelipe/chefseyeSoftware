// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String @id @default(uuid())
  email         String @unique
  password      String
  first_name    String
  last_name     String
  
  userAuthToken String @unique

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  role          Roles @relation(fields: [roleId], references: [id])
  roleId        String

  restaurants   Restaurants[]
}

model Roles {
  id            String    @id @default(uuid())
  name          String    @unique
  User          User[]
}




model Restaurants {
  id            String    @id @default(uuid())
  name          String
  address       String
  phone         String
  email         String
  image         String?

  menus         Menus[]
  menuSections  MenuSectionsOnRestaurant[]
  tables        Tables[]
  recipes       RecipeOnRestaurants[]

  user          User @relation(fields: [userId], references: [id])
  userId        String
}

model Menus {
  id            String    @id @default(uuid())
  name          String
  type          String?
  description   String?

  sections      MenuSectionsOnMenus[]

  restaurant    Restaurants @relation(fields: [restaurantId], references: [id])
  restaurantId  String
}

model MenuSectionsOnRestaurant {
  restaurant                  Restaurants  @relation(fields: [restaurantId], references: [id])
  restaurantId                String // relation scalar field (used in the `@relation` attribute above)
  menuSection                 MenuSections @relation(fields: [menuSectionId], references: [id])
  menuSectionId               String // relation scalar field (used in the `@relation` attribute above)
  menuSectionsOnRestaurantId  String @default(uuid())

  @@id([restaurantId, menuSectionId, menuSectionsOnRestaurantId])
}

model MenuSections {
  id            String    @id @default(uuid())
  name          String
  order         Int?  @default(0)

  restaurants   MenuSectionsOnRestaurant[]

  recipes       RecipeOnMenuSections[]

  menus         MenuSectionsOnMenus[]
}

model MenuSectionsOnMenus {
  menu                  Menus  @relation(fields: [menuId], references: [id])
  menuId                String // relation scalar field (used in the `@relation` attribute above)
  menuSection           MenuSections @relation(fields: [menuSectionId], references: [id])
  menuSectionId         String // relation scalar field (used in the `@relation` attribute above)
  menuSectionsOnMenusId String @default(uuid())

  @@id([menuId, menuSectionId, menuSectionsOnMenusId])
}

model Tables {
  id            Int    @id @default(autoincrement())
  locationX     Float?
  locationY     Float?
  occupied      Boolean @default(false)
  number        Int

  orders        Orders[]

  restaurant    Restaurants @relation(fields: [restaurantId], references: [id])
  restaurantId  String
}

model Ingredients {
  id              Int    @id @default(autoincrement())
  name            String
  unitList        String?
  image           String?

  recipes         RecipeIngredients[]
}

model RecipeIngredients {
  id              Int    @id @default(autoincrement())

  unit            String
  quantity        Float

  ingredient      Ingredients @relation(fields: [ingredientId], references: [id])
  ingredientId    Int

  recipe          Recipes @relation(fields: [recipeId], references: [id])
  recipeId        Int
}

model Recipes {
  id            Int    @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  image         String?

  ingredients   RecipeIngredients[]

  restaurants   RecipeOnRestaurants[]

  menuSections  RecipeOnMenuSections[]

  orders        RecipesOnOrders[]
}

model RecipeOnRestaurants {
  recipe                  Recipes  @relation(fields: [recipeId], references: [id])
  recipeId                Int // relation scalar field (used in the `@relation` attribute above)
  restaurant              Restaurants @relation(fields: [restaurantId], references: [id])
  restaurantId            String // relation scalar field (used in the `@relation` attribute above)
  recipeOnRestaurantId    String @default(uuid())

  @@id([recipeId, restaurantId, recipeOnRestaurantId])
}

model RecipeOnMenuSections {
  recipe                  Recipes  @relation(fields: [recipeId], references: [id])
  recipeId                Int // relation scalar field (used in the `@relation` attribute above)
  menuSection             MenuSections @relation(fields: [menuSectionId], references: [id])
  menuSectionId           String // relation scalar field (used in the `@relation` attribute above)
  recipeOnMenuSectionsId  String @default(uuid())

  @@id([recipeId, menuSectionId, recipeOnMenuSectionsId])
}

model Orders {
  id            String  @id @default(uuid())
  status        String
  orderDateTime DateTime @default(now())

  recipes       RecipesOnOrders[]

  table         Tables @relation(fields: [tableId], references: [id])
  tableId       Int
}

model RecipesOnOrders {
  order             Orders  @relation(fields: [orderId], references: [id])
  orderId           String // relation scalar field (used in the `@relation` attribute above)
  recipe            Recipes @relation(fields: [recipeId], references: [id])
  recipeId          Int // relation scalar field (used in the `@relation` attribute above)

  description       String?

  recipesOnOrdersId String @default(uuid())

  @@id([orderId, recipeId, recipesOnOrdersId])
}