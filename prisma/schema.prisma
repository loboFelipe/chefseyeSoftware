// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String @id @default(uuid())
  email         String @unique
  password      String
  first_name    String
  last_name     String
  
  userAuthToken String @unique

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  role          Roles @relation(fields: [roleId], references: [id])
  roleId        String

  restaurants   Restaurants[]
}

model Roles {
  id            String    @id @default(uuid())
  name          String    @unique
  User          User[]
}

model Restaurants {
  id            String    @id @default(uuid())
  name          String
  address       String
  phone         String
  email         String
  image         String?

  menus         Menus[]
  tables        Tables[]
  recipes       Recipes[]
  storages      Storages[]

  user          User @relation(fields: [userId], references: [id])
  userId        String
}

model Menus {
  id            String    @id @default(uuid())
  name          String
  type          String?
  description   String?

  restaurant    Restaurants @relation(fields: [restaurantId], references: [id])
  restaurantId  String
}

model Tables {
  id            Int    @id @default(autoincrement())
  locationX     Float?
  locationY     Float?
  occupied      Boolean @default(false)
  number        Int

  orders        Orders[]

  restaurant    Restaurants @relation(fields: [restaurantId], references: [id])
  restaurantId  String
}

model Recipes {
  id            Int    @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  image         String?

  ingredients   Ingredients[]

  restaurant    Restaurants @relation(fields: [restaurantId], references: [id])
  restaurantId  String

  order         Orders @relation(fields: [orderId], references: [id])
  orderId       String
}

model Ingredients {
  id          Int    @id @default(autoincrement())
  name        String
  unit        String
  unitList    String?
  quantity    Float
  image       String?

  recipe      Recipes @relation(fields: [recipeId], references: [id])
  recipeId    Int

  storages        Storages @relation(fields: [storagesId], references: [id])
  storagesId      Int
}

model Orders {
  id            String  @id @default(uuid())
  status        String
  orderDateTime DateTime

  recipes       Recipes[]

  table         Tables @relation(fields: [tableId], references: [id])
  tableId       Int
}

model Storages {
  id                Int @id @default(autoincrement())

  ingredients       Ingredients[]
  quatityInStorage  Int
  maxCapacity       Int
  unit              String
  unitList          String?

  restaurant        Restaurants @relation(fields: [restaurantId], references: [id])
  restaurantId      String
}